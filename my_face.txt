import threading
import cv2
from deepface import DeepFace

cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)

cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

counter = 0
face_match = False
is_thread_running = False  # Flag to prevent multiple concurrent threads

reference_img = cv2.imread("selamsew.jpg")

# Define the ROI (Region of Interest) coordinates
roi_x, roi_y, roi_width, roi_height = 160, 120, 320, 240  # Adjust as needed

def check_face(frame):
    global face_match, is_thread_running
    try:
        result = DeepFace.verify(frame, reference_img.copy())
        face_match = result['verified']
    except ValueError:
        face_match = False
    finally:
        is_thread_running = False  # Reset the flag when the thread completes

while True:
    ret, frame = cap.read()

    if ret:
        # Draw a rectangle for the region of interest (ROI)
        cv2.rectangle(frame, (roi_x, roi_y), (roi_x + roi_width, roi_y + roi_height), (255, 0, 0), 2)

        # Process every 60 frames and only if a thread is not already running
        if counter % 60 == 0 and not is_thread_running:
            roi_frame = frame[roi_y:roi_y + roi_height, roi_x:roi_x + roi_width].copy()
            is_thread_running = True  # Set the flag to indicate a thread is running
            threading.Thread(target=check_face, args=(roi_frame,)).start()

        counter += 1

        # Display match or no match result on the frame
        if face_match:
            cv2.putText(frame, "Match", (20, 450), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 255, 0), 3)
        else:
            cv2.putText(frame, "No-Match", (20, 450), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 3)

        cv2.imshow("Video", frame)

    key = cv2.waitKey(1)
    if key == ord("q"):
        break

cap.release()
cv2.destroyAllWindows()
